/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'

description = 'Ballerina - Kafka Examples'

def ballerinaDist = "${project.rootDir}/target/ballerina-runtime"
def examples = ["twitter-filter/elasticsearch_consumer", "twitter-filter/mock_twitter_server", "twitter-filter/twitter_producer", "order-manager/order_service", "order-manager/order_processor", "order-manager/notification_service"]
def packageName = "kafka"

dependencies {
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"
    implementation group: 'org.testng', name: 'testng', version: "${testngVersion}"
}

clean {
    examples.forEach { example ->
        delete "${projectDir}/${example}/target"
    }
}

task testExamples {
    doLast {
        def moduleVersion = "${project.version}".replace("-SNAPSHOT", "")
        examples.each { example ->
            def dependenciesTomlFile = new File("${project.projectDir}/resources/Dependencies.toml")
            def dependenciesTomlFileInExample = new File("${project.projectDir}/${example}/Dependencies.toml")
            def newDependenciesTomlText = dependenciesTomlFile.text.replace("@project.version@", moduleVersion)
            dependenciesTomlFileInExample.text = newDependenciesTomlText
            try {
                exec {
                    workingDir project.projectDir
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat test --offline ${example} && exit %%ERRORLEVEL%%"
                    } else {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal test --offline ${example}"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Build failed: " + e.message)
                throw e
            } finally {
                dependenciesTomlFileInExample.text = ""
            }
        }
    }
}

task buildExamples {
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":${packageName}-examples:test")) {
            buildExamples.enabled = false
        } else {
            testExamples.enabled = false
        }
    }
    doLast {
        def moduleVersion = "${project.version}".replace("-SNAPSHOT", "")
        examples.each { example ->
            def dependenciesTomlFile = new File("${project.projectDir}/resources/Dependencies.toml")
            def dependenciesTomlFileInExample = new File("${project.projectDir}/${example}/Dependencies.toml")
            def newDependenciesTomlText = dependenciesTomlFile.text.replace("@project.version@", moduleVersion)
            dependenciesTomlFileInExample.text = newDependenciesTomlText
            try {
                exec {
                    workingDir project.projectDir
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat build ${example} && exit %%ERRORLEVEL%%"
                    } else {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal build ${example}"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Build failed: " + e.message)
                throw e
            } finally {
                dependenciesTomlFileInExample.text = ""
            }
        }
    }
}

task stopKafkaServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=kafka-test"
                standardOutput = stdOut
            }
            if (stdOut.toString().contains("kafka-test")) {
                println "Stopping Kafka server."
                exec {
                    commandLine 'sh', '-c', "docker-compose -f ../ballerina/tests/docker-compose.yaml rm -svf"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                sleep(5 * 1000)
            } else {
                println "Kafka server is not started."
            }
        }
    }
}

buildExamples.dependsOn ":${packageName}-ballerina:build"
testExamples.dependsOn ":${packageName}-ballerina:build"
build.dependsOn buildExamples
test.dependsOn testExamples
build.finalizedBy stopKafkaServer
